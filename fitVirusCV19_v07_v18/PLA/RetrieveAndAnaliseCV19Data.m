function [Out, H1] = RetrieveAndAnaliseCV19Data(getData,StartDay)
%% RetrieveAndAnaliseCV19Data
% Retrieve data for a selected area; plot an evaluation of R0, N, Cend. 
%
% Inputs:
%
% * getData  a function handle for an area-specific data retrieval function;
%   see the specific function for the area and source. Note limitations
%   below.
% * StartDay the start day of the data. If start day is not given then it
%   is taken at the middle of data.
%
% Outputs:
%   out = a structure with the following fields:
%         out.R0 -  reproduction number
%         out.N  -  population size
%         out.Cend - epidemy size
%         out.date0 - start day
%         out.nday - number of days
%
%  H1 = figure handle
%
% Examples: 
%    [OutItaly, H1] = RetrieveAndAnaliseCV19Data(@getDataItaly, 10);
%    disp(OutItaly);
%    fitVirusCV19(@getDataItaly,'prn','on','nmax',1e5)
%    H2 = gcf; H2.Name = 'Illustration using retrieved data and estimated parameters';
% 
%   [OutUSA, H3] = RetrieveAndAnaliseCV19Data(@getDataUSA,15);
%   disp(OutUSA);
%   fitVirusCV19(@getDataItaly,'prn','on','nmax',10e5);
%   H4 = gcf; H4.Name = 'Illustration using retrieved data and estimated parameters';
%
% Relies upon: 
% * fitVirusCV19 command. 
%   This command can be run immediately afterwards to illustrate the projected
%   path of the epidemic, using the parameters that are estimated using the 
%   full data set presented to this function. Note the parameters shown in
%   the figure generated by this function for R_0 (top panel), Population (bottom panel),
%   and C_end (middle panel) are used in the projection generated using this
%   command, and are shown in the graph it generates.
%
% Sources:
% 1. Milan Batista (2020). fitVirusCOVID19
% (https://www.mathworks.com/matlabcentral/fileexchange/74658-fitviruscovid19),
% MATLAB Central File Exchange. Retrieved March 29, 2020.
% 2. Improvements in descriptions, limitations, code, and graphing, Patrick Anderson, March 2020.
% [No change in data or calculations.]
% 3. Data from multiple public sources, which differ by area, and may
% or may not be reliable. These source data are not from the authors listed in [1] and [2].
% The data sources for many countries are described and maintained here:
% <https://ourworldindata.org/coronavirus-source-data.>
% <https://www.worldometers.info/coronavirus/coronavirus-cases>
% Note there are discrepancies between these data and the data maintained by
% authorities within various countries. For example, as of March 29, 2020, the US CDC data is not
% identical to that published by other sources. This may be due to differences
% in counting persons repatriated from China:
% <https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/cases-in-us.html>.
% 
%
% No copyright or license claimed on code retrieved from file exchange
% cited above, other than what is claimed in "license.txt." No warranty is
% provided as stated in the license.txt file.
%
% *Limitations*
% 
% 1. This routine relies upon publicly-available data sources that are not reviewed
%    by the authors of this routine, and may be subject to reporting errors, 
%    limitations in testing, censorship or pressure, and changes in testing protocols.
%    Therefore, do not rely upon data or visualizations produced or retrieved by this utility,
%    other than as an illustration. The user is solely responsible for confirming
%    the data and interpreting the results. 
% 2. The "SIR" model, while widely used and extremely useful, has certain
%    limitations. Furthermore, all models rely upon parameters, and functional forms, 
%    that are imperfect at best.
% 3. This is not health advice, nor legal advice.
% 4. There is no warranty on this utility. 


%% Checking and Parsing
% [updated PLA 3/29 for additional output]

    narginchk(1,2)
    nargoutchk(1,2)

%% Retrieve Data from Public Source; Analise Using SIR Model

    res = fitVirusCV19(getData,'plt','off');
    date0 = res.date0;
    nday = res.day;
    if nargin < 2
        StartDay = ceil(0.5*nday);
    end

    ndat = nday - StartDay ;
    if ndat < 1
                    % PLA removed 3/30/2020 as now a required output
                    %         if nargout > 0
                    %             Out = [];
                    %         end
        error('Invalid number of days.')
    end
    R0 = NaN(ndat,1);
    N  = NaN(ndat,1);
    Cend = NaN(ndat,1);
    k = 0;
    date0 = date0 + StartDay - 1;
    for n = StartDay:nday
        res = fitVirusCV19(getData,'day',n,'plt','off');
        k = k + 1;
        if ~isempty(res)
            R0(k) = res.R0;
            N(k) = res.N;
            Cend(k) = res.Clim;
        else
            fprintf('Fail day %d\n',n)
        end
    end
    t = 0:k-1;
    
%% Store Results
% [PLA expanded this out structure, 3/30/2020]


Out.Area = res.country;
Out.desc = 'Illustration of SIR model using public data';

Out.R0 = R0;
Out.N  = N;
Out.Cend = Cend;
Out.date0 = date0;
Out.date0string = datestr(date0);
Out.nday = nday - StartDay ;

Out.ModelFit = '----------';
Out.ModelAdjR2 = res.AdjR2;
Out.beta = res.beta;
Out.gamma = res.gamma;
Out.N = res.N;
Out.Clim = res.Clim;

Out.Notes = '----------';
Out.Limitations = "See limitations on data, and model, in license.txt.";
Out.Limitations2 = "Source data not verified.";
Out.Limitations2 = "User must review source data and conduct his or her own evaluation.";


%% plot results
% [PLA rewrote some parts of graphing code; no change in calculations or
% data.]

% figure
H1 = figure;
H1.Name = "Parameter Estimates for SIR Model Using Data for " + res.country;

    set(gcf,'Position',[100 100 832 624])
    hold on

   % plot R0 ---------------------
    subplot(3,1,1)
    hold on

   % RR = log10(R0);
    RR = R0;
    plot(t+date0,RR,'k','LineWidth',2)
    scatter(t+date0,RR,50,'k','filled')
    scatter(t+date0,RR,30,'w','filled')

    %... limits
    xlim([t(1),t(end)]+date0);

    %... what kind of thicks?
    datetick('x',20,'keeplimits')

    %... add title
    title(sprintf('CORONA-19 epidemic in %s. Daily estimates.',res.country))

    %... add axis labels
    ylabel('R_0')
    xlabel('Date')

    %... add grid
    grid on

    % plot Clim ---------------------
    subplot(3,1,2)
    hold on
    %...set scale
    if max(Cend) > 1000
        sf = 1000;
    else
        sf = 1;
    end
    plot(t+date0,Cend/sf,'r','LineWidth',2)
    scatter(t+date0,Cend/sf,50,'k','filled')
    scatter(t+date0,Cend/sf,30,'w','filled')

    %... limits
    xlim([t(1),t(end)]+date0);

    %... what kind of thicks?
    datetick('x',20,'keeplimits')

    % add title
    title('Epidemic size')

    % add axis labels
    xlabel('Date')
    if sf == 1
        ylable('Cases')
    else
        ylabel('Cases (x1000)')
    end

    % add grid
    grid on

    % plot Clim ---------------------
    subplot(3,1,3)
    hold on
    %...set scale
    if max(N) > 1000
        sf = 1000;
    else
        sf = 1;
    end
    plot(t+date0,N/sf,'b','LineWidth',2)
    scatter(t+date0,N/sf,50,'k','filled')
    scatter(t+date0,N/sf,30,'w','filled')

    %... limits
    xlim([t(1),t(end)]+date0);

    %... what kind of thicks?
    datetick('x',20,'keeplimits')

    % add title
    title('Initial susceptible population size')

    % add axis labels
    xlabel('Date')
    if sf == 1
        ylable('People')
    else
        ylabel('People (x1000)')
    end

    % add grid
    grid on

    hold off
    

end
%
% See limitations in text above, and in "license.txt" file.